knitr::opts_chunk$set(echo = TRUE)
# define simulation parameters
n_per_group <- 30
n_simulations_to_run <- 100
alpha <- .05
# group statistics
group1_mean <- 9.6
group2_mean <- 7.8
stdev <- .5
# calculate effect size (why not?)
cohens_d <- (group1_mean-group2_mean)/stdev
# define simulation parameters
n_per_group <- 30
n_simulations_to_run <- 100
alpha <- .05
# group statistics
group1_mean <- 9.6
group2_mean <- 7.8
stdev <- 1.5
# calculate effect size (why not?)
cohens_d <- (group1_mean-group2_mean)/stdev
set.seed(1) # set the seed for reproducible randomness!
# for now, don't worry too much about understanding the replicate() function
# all you need to know is that this replicates the same code again and again
#   (the amount of times is specified by n_simulations_to_run, defined above)
#  and each time it simulates new data for each condition, according to the
#   parameters we defined above
# in other words, it's similar to a loop, but the thing that changes each
#   iteration isn't an index (like in a for-loop) but the randomly generated data
# since rnorm() is different each time, replicate() is useful for repeating
sim_t_reps <- replicate(n_simulations_to_run, {
# generate random data
# first, simulate data for group 1
data1 <- rnorm(n_per_group, mean=group1_mean, sd=stdev)
# second, simulate data for group 2
data2 <- rnorm(n_per_group, mean=group2_mean, sd=stdev)
# put into a data.frame for the current simulated data
cur_sim_data <- data.frame(
Condition = c(rep("Group 1",n_per_group), rep("Group 2",n_per_group)) ,
Score = c(data1, data2)
)
# then perform a t-test (by default, two-sided)
sim_t <- t.test(Score ~ Condition, data = cur_sim_data)
# then we grab the p-value and *return* it to sim_t_reps
return(sim_t$p.value)
} )
# after running all the simulations above, let's do some calculations
round(sim_t_reps, digits = 3) # print out the p-vals, rounded to 3 decimals
sum(sim_t_reps < alpha) # how many significant results?
sum(sim_t_reps < alpha)/n_simulations_to_run * 100 # convert to power %
# customized histogram
hist(sim_t_reps,
xlab="Simulated p-value", # change the x-axis label
# specify where the bin breaks are, from 0 to 1, size of .025
breaks = seq(0,1, by=.025),
main="Histogram of simulated p-values")
abline(v = alpha, col="red") # And add a red line at alpha (sig cutoff)
# after running all the simulations above, let's do some calculations
round(sim_t_reps, digits = 3) # print out the p-vals, rounded to 3 decimals
sum(sim_t_reps < alpha) # how many significant results?
sum(sim_t_reps < alpha)/n_simulations_to_run * 100 # convert to power %
# customized histogram
hist(sim_t_reps,
xlab="Simulated p-value", # change the x-axis label
# specify where the bin breaks are, from 0 to 1, size of .025
breaks = seq(0,1, by=.025),
main="Histogram of simulated p-values")
abline(v = alpha, col="red") # And add a red line at alpha (sig cutoff)
